70. Climbing Stairs

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45

Java iterative two pointers: 0ms, 39.3mb
// cumulatively keep track of # of paths with memo pointers.
// This is basically fibonacci n = f(n-1)+f(n-2)
class Solution {
    public int climbStairs(int n) {
        int previous = 1, current =1;
        for(int i = 1; i<n; i++){
            current = current+previous; 
            previous = current-previous;
        }
        return current;
    }
}

Java 8 Lambda: 2ms, 39.5mb // This is my least favorite. 
class Solution {
    public int climbStairs(int n) {
        return Stream.iterate(new int[]{1, 0}, f -> new int[]{f[0] + f[1], f[0]})
                     .limit(n + 1)
                     .reduce((a, b) -> b)
                     .get()[0];
    }
}

Java Recursive + memo: 1ms, 39.6mb

class Solution {
    List<Integer>pathsToStep = new ArrayList(List.of(1,2));
    public int climbStairs(int n) {
        if(n>pathsToStep.size())
            pathsToStep.add(climbStairs(n-1)+climbStairs(n-2));
        return pathsToStep.get(n-1);
    }
}


PYTHON iterative two pointer memo: 12ms, 13.3mb

class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        previous, current = 0,1
        for i in range(n):
            current+=previous
            previous=current-previous
        
        return current


