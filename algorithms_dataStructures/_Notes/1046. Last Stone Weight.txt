1046. Last Stone Weight

You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:

If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.

Return the weight of the last remaining stone. If there are no stones left, return 0.

Example 1:

Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.
Example 2:

Input: stones = [1]
Output: 1
 

Constraints:

1 <= stones.length <= 30
1 <= stones[i] <= 1000


Java sorted list: 3 ms, 40.2 MB TIME O(n^2), space O(N)

class Solution {
    public int lastStoneWeight(int[] stones) {
        if(stones.length ==1)
            return stones[0];
        List<Integer> ordered = Arrays.stream(stones).boxed().collect(Collectors.toList());
        Collections.sort(ordered);
        
        while (ordered.size()>1){
            int y = ordered.remove(ordered.size()-1);
            int x = ordered.remove(ordered.size()-1);
            if(x!=y){
                int smash = y-x;
                int index = Collections.binarySearch(ordered, smash);
                if (index<0)
                    ordered.add(-index -1, newStone);
                else   
                    ordered.add(index, smash);
            }
        }
        return ordered.size()==0?0:ordered.get(0);
    }
}

finding and removing the maximum stones took O(1) time, but adding the new stone took O(N) time. In both cases, we're left with an overall time complexity of O(N)O(N)O(N) per stone-smash turn.

We want to find a solution that makes both removing the maximums, and adding a new stone, less than O(N).

For this kind of maximum-maintenance, we use a Max-Heap, also known as a Max-Priority Queue. A Max-Heap is a data structure that can take items, and can remove and return the maximum, with both operations taking O(log⁡N)time. It does this by maintaining the items in a special order (within the array), or as a balanced binary tree. We don't need to know these details though, almost all programming languages have a Heap data structure!

Here is the pseudocode using a Heap.

define function last_stone_weight(stones):
    heap = a new Max-Heap
    add all stones to heap
    while heap contains more than 1 stone:
        heavy_stone_1 = remove max from heap
        heavy_stone_2 = remove max from heap
        if heavy_stone_1 is heavier than heavy_stone_2:
            new_stone = heavy_stone_1 - heavy_stone_2
            add new_stone to heap
    if heap is empty:
        return 0
    return last stone on heap



While most programming languages have a Heap/ Priority Queue data structure, some, such as Python and Java, only have Min-Heap. Just as the name suggests, this is a Heap that instead of always returning the maximum item, it returns the minimum. There are two solutions to this problem:

Multiply all numbers going into the heap by -1, and then multiply them by -1 to restore them when they come out.
Pass a comparator in (language-dependent).


Java Heap: 1 ms, 40.3 MB Time O(N log N), Sapce O(N)

class Solution {
    
    public int lastStoneWeight(int[] stones) {
        
        // Insert all the stones into a Max-Heap.
        PriorityQueue<Integer> heap = new PriorityQueue<>(Comparator.reverseOrder());
        for (int stone: stones) {
            heap.add(stone);
        }

        // While there is more than one stone left, we need to remove the two largest
        // and smash them together. If there is a resulting stone, we need to put into
        // the heap.
        while (heap.size() > 1) {
            int stone1 = heap.remove();
            int stone2 = heap.remove();
            if (stone1 != stone2) {
                heap.add(stone1 - stone2);
            }
        }

        // Check whether or not there is a stone left to return.
        return heap.isEmpty() ? 0 : heap.remove();
    }



Java BUCKET SORT: 0 ms, 40.2 MB

class Solution {
    
    public int lastStoneWeight(int[] stones) {
        
        // Set up the bucket array.
        int maxWeight = stones[0];
        for (int stone: stones) {
            maxWeight = Math.max(maxWeight, stone);
        }
        int[] buckets = new int[maxWeight + 1];

        // Bucket sort.
        for (int weight : stones) {
            buckets[weight]++;
        }

        // Scan through the buckets.
        int biggestWeight = 0;
        int currentWeight = maxWeight;
        while (currentWeight > 0) {
            if (buckets[currentWeight] == 0) {
                currentWeight--;
            } else if (biggestWeight == 0) {
                buckets[currentWeight] %= 2;
                if (buckets[currentWeight] == 1) {
                    biggestWeight = currentWeight;
                }
                currentWeight--;
            } else {
                buckets[currentWeight]--;
                if (biggestWeight - currentWeight <= currentWeight) {
                    buckets[biggestWeight - currentWeight]++;
                    biggestWeight = 0;
                } else {
                    biggestWeight -= currentWeight;
                }
            }
        }
        return biggestWeight;
    }
}

This approach is only viable when the maximum stone weight is small, or is at least smaller than the number of stones.

Let WWW be the maximum stone weight in the input array. We can create a bucket array of size W+1W + 1W+1, where each index of the bucket array represents a stone weight. Then, we can bucket "sort" the stones in O(N)O(N)O(N) time by iterating over them and incrementing the relevant bucket array index by 1.
}