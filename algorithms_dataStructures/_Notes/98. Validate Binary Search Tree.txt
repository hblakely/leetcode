98. Validate Binary Search Tree

Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
Example 2:


Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1


Java Recursion: 0 ms, 42.6 MB

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isValidBST(TreeNode root){
        return validate(root,null,null);
    }
    public boolean validate(TreeNode root, TreeNode min, TreeNode max){
        // End Recursion Logic
        if(root == null) // We got to the bottom without failing.
            return true; 
        if(min != null && root.val <= min.val) 
            return false; 
        if(max != null && root.val >= max.val)
            return false;
        // recurr
        return validate(root.left, min, root) && validate(root.right, root, max);
    }
}

Java Iterative: 5 ms, 42.4 MB

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private Deque<TreeNode> stack = new LinkedList();
    private Deque<Integer> upperLimits = new LinkedList();
    private Deque<Integer> lowerLimits = new LinkedList();
    
    public void pushToStack(TreeNode root, Integer low, Integer high){
        stack.add(root);
        lowerLimits.add(low);
        upperLimits.add(high);
    }

    public boolean isValidBST(TreeNode root){
        Integer low = null, high = null, val;
        pushToStack(root, low, high);
        while(!stack.isEmpty()){
            // set to and remove first item in list.
            root = stack.poll(); 
            low = lowerLimits.poll();
            high = upperLimits.poll();
            // skip if root is null, work on the rest of the stack.
            if(root == null) continue; 

            val = root.val;
            if(low != null && val <= low)
                return false;
            if (high != null && val >= high)
                return false;
            pushToStack(root.right, val, high);
            pushToStack(root.left, low, val);

        }
        return true;
    }
}


PYTHON Recursive: 36 ms, 17.8 MB

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        return self.validate(root, None, None)

    def validate(self, root, min_val, max_val):
        if not root:
            return True
        if min_val is not None and root.val <= min_val:
            return False
        if max_val is not None and root.val >= max_val:
            return False
        return self.validate(root.left, min_val, root.val) and self.validate(root.right, root.val, max_val)


PYTHON Iterative: 43 ms, 17.8 MB

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        stack=[]
        stack.append([root,None,None])
        while len(stack)>0:
            node, lo, hi = stack.pop(0)
            if not node: continue
            if lo is not None and node.val <= lo:
                return False
            if hi is not None and node.val >= hi:
                return False
            stack.insert(0,[node.left, lo, node.val])
            stack.insert(0,[node.right, node.val, hi])

        return True


PYTHON ITERATIVE with initialized minimum and maximums:
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def isValidBST(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        stack=[]
        stack.append([root,-float('inf'),float('inf')])
        while len(stack)>0:
            node, lo, hi = stack.pop(0)
            if not node: continue
            if not(lo < node.val < hi):
                return False
            stack.insert(0,[node.left, lo, node.val])
            stack.insert(0,[node.right, node.val, hi])

        return True