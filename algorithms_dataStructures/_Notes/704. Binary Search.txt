704. Binary Search

Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4
Example 2:

Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1
 

Constraints:

1 <= nums.length <= 104
-104 < nums[i], target < 104
All the integers in nums are unique.
nums is sorted in ascending order.

Java O(log(n)) Iterative: 0 ms, 43MB

class Solution {
    public int search(int[] nums, int target) {
        int hi=nums.length-1,lo=0;
        while(lo<=hi){
            int mid = lo+(hi-lo)/2;
            if(nums[mid]==target)
                return mid;
            if(nums[mid]>target)
                hi=mid-1;
            else
                lo=mid+1;
        }
        // Inserting System.gc(); anywhere in the program slowed down
        // substantially, and also, didn't actually help with the memory usage.
        return -1;
    }
}

PYTHON Iterative: 199 ms, 14.6 MB

class Solution(object):
    def search(self, nums, target):
        hi,lo = len(nums)-1, 0
        while lo<=hi:
            mid = lo+(hi-lo)//2 # // to get integer division
            if nums[mid]==target:
                return mid
            if nums[mid]<target: lo=mid+1
            else: hi=mid-1
        return -1

PYTHON RECURSIVE: 276 ms,22.3 MB

class Solution(object):
    def search(self, nums, target):
        return self.recurr(nums,target,0,len(nums)-1)

    def recurr(self, nums,target,lo,hi):
        # didnt find
        if lo>hi:
            return -1
        mid = lo+(hi-lo)//2
        if nums[mid] == target:
            return mid # found
        if nums[mid] > target:
            return self.recurr(nums,target,lo,hi-1)
        else: return self.recurr(nums,target,lo+1,hi)
