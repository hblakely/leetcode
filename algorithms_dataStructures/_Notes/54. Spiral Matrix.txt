54. Spiral Matrix

Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100



JAVA Iterative First Attempt Set up Boundaries: 0ms, 40.9MB

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        // spiral order
        // first row til end-column
        // then traverse down rows at end-column
        // when end-row/end-column, traverse to column index 0
        // when at end-row/column0, traverse up at column 0
        // until first row + 1.
        // then traverse right, increaseing column on row + 1
        // until end-column minus 1. 
        // then traverse down rows until end-row minus 1

        // when can't move right, move down
        // when can't move down, move left
        // when can't move left, move up
        // when can't move up, move right
        // when visited each square, break;

        // Spiralized matrix.
        List<Integer> spiral = new ArrayList<>();
        
        // Boundaries for spiral.
        int min_row = 0, min_col = 0;
        int max_row = matrix.length;
        int max_col = matrix[0].length;

        // Number of cells in matrix.
        int area = max_row*max_col;

        // Current coordinates in matrix.
        int r = 0, c = 0;

        while(spiral.size() < area){        
            // condition for moving right: current column < max column
            while(c < max_col){
                spiral.add(matrix[r][c]);
                if(c < max_col)
                    c++;
            }
            c--;
            r++;
            // update max_column
            max_col--;
            if(spiral.size()==area)
                break;

            // condition for moving down: current row < max row 
            while(r < max_row){
                spiral.add(matrix[r][c]);
                if(r < max_row)
                    r++;
            }
            r--;
            c--;
            // update max_row
            max_row--;
            if(spiral.size()==area)
                break;

            // condition for moving left: current column > min column
            while(c >= min_col){
                spiral.add(matrix[r][c]);
                if(c >= min_col)
                    c--;
            }
            c++;
            r--;
            // update min_col
            min_col++;
            if(spiral.size()==area)
                break;

            // condition for moving up: current row > min row
            while(r > min_row){
                spiral.add(matrix[r][c]);
                if(r > min_row)
                    r--;
            }
            r++;
            c++;
            // update min_row
            min_row++;
        }
 
        return spiral;
    }
}


Java Iterative Boundaries Refined: 0ms, 40.9mb

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<>();
        int rows = matrix.length;
        int columns = matrix[0].length;
        int up = 0;
        int left = 0;
        int right = columns - 1;
        int down = rows - 1;

        while (result.size() < rows * columns) {
            // Traverse from left to right.
            for (int col = left; col <= right; col++) {
                result.add(matrix[up][col]);
            }
            // Traverse downwards.
            for (int row = up + 1; row <= down; row++) {
                result.add(matrix[row][right]);
            }
            // Make sure we are now on a different row.
            if (up != down) {
                // Traverse from right to left.
                for (int col = right - 1; col >= left; col--) {
                    result.add(matrix[down][col]);
                }
            }
            // Make sure we are now on a different column.
            if (left != right) {
                // Traverse upwards.
                for (int row = down - 1; row > up; row--) {
                    result.add(matrix[row][left]);
                }
            }
            left++;
            right--;
            up++;
            down--;
        }

        return result;
    }
}


Java, Mark Visited Cells: 0ms, 40.8MB

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        int VISITED = 101;
        int rows = matrix.length;
        int columns = matrix[0].length;
        // Four directions that we will move: right, down, left, up.
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        // Initial direction: moving right.
        int currentDirection = 0;
        // The number of times we change the direction.
        int changeDirection = 0;
        // Current place that we are at is (row, col).
        // row is the row index; col is the column index.
        int row = 0;
        int col = 0;
        // Store the first element and mark it as visited.
        List<Integer> result = new ArrayList<>();
        result.add(matrix[0][0]);
        matrix[0][0] = VISITED;
        while (changeDirection < 2) {
            while (row + directions[currentDirection][0] >= 0 &&
                   row + directions[currentDirection][0] < rows &&
                   col + directions[currentDirection][1] >= 0 &&
                   col + directions[currentDirection][1] < columns &&
                   matrix[row + directions[currentDirection][0]]
                   [col + directions[currentDirection][1]] != VISITED) {
                // Reset this to 0 since we did not break and change the direction.
                changeDirection = 0;
                // Calculate the next place that we will move to.
                row = row + directions[currentDirection][0];
                col = col + directions[currentDirection][1];
                result.add(matrix[row][col]);
                matrix[row][col] = VISITED;
            }
            // Change our direction.
            currentDirection = (currentDirection + 1) % 4;
            // Increment change_direction because we changed our direction.
            changeDirection++;
        }
        return result;
    }
}