589. N-ary Tree Preorder Traversal

Given the root of an n-ary tree, return the preorder traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

Example 1:

Input: root = [1,null,3,2,4,null,5,6]
Output: [1,3,5,6,2,4]
Example 2:


Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
0 <= Node.val <= 104
The height of the n-ary tree is less than or equal to 1000.
 

Follow up: Recursive solution is trivial, could you do it iteratively?


Preorder Traversal: Visit the root node, then traverse the left subtree and finally traverse the right subtree.
Inorder Traversal: Traverse the left subtree, then visit the root node and finally traverse the right subtree.
Postorder Traversal: Traverse the left subtree, then traverse the right subtree and finally visit the root node.
Level-order Traversal: Traverse the tree level by level.

			A
		 /	|  \
	    B   C   D
	       / \   |
	      E   F  G

1. Preorder Traversal
In an N-ary tree, preorder means visit the root node first and then traverse the subtree rooted at its children one by one. For instance, the preorder of the 3-ary tree above is: A->B->C->E->F->D->G.
2. Postorder Traversal
In an N-ary tree, postorder means traverse the subtree rooted at its children first and then visit the root node itself. For instance, the postorder of the 3-ary tree above is: B->E->F->C->G->D->A.
3. Level-order Traversal
Level-order traversal in an N-ary tree is the same with a binary tree. Typically, when we do breadth-first search in a tree, we will traverse the tree in level order. For instance, the level-order of the 3-ary tree above is: A->B->C->D->E->F->G

JAVA recursion:  1 ms, 43.6 MB
/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> preorder = new ArrayList<>();
        recurr(preorder, root);
        return preorder;
    }

    public void recurr(List<Integer> preorder, Node root) {
        if (root == null) {
            return;
        }

        preorder.add(root.val);

        for (Node child : root.children) {
            recurr(preorder, child);
        }
    }
}

Java iterative 4 ms, 43.5 MB - Why iterate if it's slower?

class Solution {
    public List<Integer> preorder(Node root) {
        // Preorder - Add current Node's Value, then child before siblings.(Depth First)
        LinkedList<Node> stack = new LinkedList<>();
        LinkedList<Integer> preorder = new LinkedList<>();
        if(root==null) // Fail early, fail often. 
            return preorder;

        stack.add(root);
        while(!stack.isEmpty()){
            Node n = stack.pollLast();
            preorder.add(n.val);
            // reverse, so when we add to stack, popLast will give original order of children.
            Collections.reverse(n.children); 
            for(Node item:n.children)
                stack.add(item);
        }
        return preorder;
    }
}


Python recursive: 47 ms, 16.4 MB

"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

class Solution(object):
    def preorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        return self.recurr(root, [])

    def recurr(self, node, lst):
        if not node:
            return lst
        lst.append(node.val)
        for child in node.children:
            self.recurr(child, lst)
        return lst


Python iterative: runtime varied greatly between 14-36ms, 16.3mb
"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""
class Solution(object):
    def preorder(self, root):
        # initialize empty preorder list to be returned
        lst=[]
        # return empty list if no items to process
        if not root:
            return lst
        # initialize LIFO stack with root node
        stack=[root]
        # loop ast long as there are nodes on the stack
        while stack: 
            # remove last element from stack to be processed
            node = stack.pop()   
            # append value of current node to preorder list
            lst.append(node.val) 
            # append current node's children in reverse order to stack
            for i in range(0, len(node.children)):
                stack.append(node.children.pop()) 
        # return preorder list of node values
        return lst




