1114. Print in Order

Suppose we have a class:

public class Foo {
  public void first() { print("first"); }
  public void second() { print("second"); }
  public void third() { print("third"); }
}
The same instance of Foo will be passed to three different threads. Thread A will call first(), thread B will call second(), and thread C will call third(). Design a mechanism and modify the program to ensure that second() is executed after first(), and third() is executed after second().

Note:

We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seem to imply the ordering. The input format you see is mainly to ensure our tests' comprehensiveness.

 

Example 1:

Input: nums = [1,2,3]
Output: "firstsecondthird"
Explanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). "firstsecondthird" is the correct output.
Example 2:

Input: nums = [1,3,2]
Output: "firstsecondthird"
Explanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). "firstsecondthird" is the correct output.
 

Constraints:

nums is a permutation of [1, 2, 3].




Java AtomicInteger: 11ms, 42.3MB

class Foo {
    AtomicInteger firstDone = new AtomicInteger(0);
    AtomicInteger secondDone = new AtomicInteger(0);

    public Foo() {
        
    }

    public void first(Runnable printFirst) throws InterruptedException {
        
        // printFirst.run() outputs "first". Do not change or remove this line.
        printFirst.run();
        firstDone.incrementAndGet();
    }

    public void second(Runnable printSecond) throws InterruptedException {
        while(firstDone.get() != 1){
            // Waiting for first job to be done. 
        }
        // printSecond.run() outputs "second". Do not change or remove this line.
        printSecond.run();
        secondDone.incrementAndGet();
    }

    public void third(Runnable printThird) throws InterruptedException {
        while(secondDone.get()!= 1){
            // waiting for second job to be done.
        }
        // printThird.run() outputs "third". Do not change or remove this line.
        printThird.run();
    }
}



Java CountDownLatch: 10ms, 41.9MB

class Foo {
   private CountDownLatch latchAfterFirst ;
   private CountDownLatch latchAfterSecond;
   public Foo() {
       latchAfterFirst = new CountDownLatch(1);
       latchAfterSecond = new CountDownLatch(1);
   }



    public void first(Runnable printFirst) throws InterruptedException {
      printFirst.run();
      latchAfterFirst.countDown();
    }

    public void second(Runnable printSecond) throws InterruptedException {
        latchAfterFirst.await();
        printSecond.run();
        latchAfterSecond.countDown();
    }

    public void third(Runnable printThird) throws InterruptedException {
        latchAfterSecond.await();
        printThird.run();
    }
}




UNTESTED GO:

package main

import (
  "fmt"
  "sync/atomic"
)

type Foo struct {
  firstDone  int32
  secondDone int32
}

func NewFoo() *Foo {
  return &Foo{}
}

func (f *Foo) first(printFirst func()) {
  // printFirst() outputs "first". Do not change or remove this line.
  printFirst()
  atomic.AddInt32(&f.firstDone, 1)
}

func (f *Foo) second(printSecond func()) {
  for atomic.LoadInt32(&f.firstDone) != 1 {
    // Waiting for first job to be done.
  }
  // printSecond() outputs "second". Do not change or remove this line.
  printSecond()
  atomic.AddInt32(&f.secondDone, 1)
}

func (f *Foo) third(printThird func()) {
  for atomic.LoadInt32(&f.secondDone) != 1 {
    // waiting for second job to be done.
  }
  // printThird() outputs "third". Do not change or remove this line.
  printThird()
}

func main() {
  foo := NewFoo()

  // Example usage
  printFirst := func() {
    fmt.Println("first")
  }
  printSecond := func() {
    fmt.Println("second")
  }
  printThird := func() {
    fmt.Println("third")
  }

  go foo.second(printSecond)
  go foo.third(printThird)
  foo.first(printFirst)

  // Wait for goroutines to finish before exiting
  // (This is just for demonstration purposes)
  var wg sync.WaitGroup
  wg.Add(2)
  go func() {
    defer wg.Done()
    foo.second(printSecond)
  }()
  go func() {
    defer wg.Done()
    foo.third(printThird)
  }()
  wg.Wait()
}

