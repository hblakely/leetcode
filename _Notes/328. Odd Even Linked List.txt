328. Odd Even Linked List

Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in O(1) extra space complexity and O(n) time complexity.

 
Example 1:

Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]
Example 2:


Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]


Constraints:

The number of nodes in the linked list is in the range [0, 104].
-106 <= Node.val <= 106


Go two lists, boolean isOdd, First Attempt: 6ms, 3.3MB

func oddEvenList(head *ListNode) *ListNode {
    odd := &ListNode{}
    even := &ListNode{}
    even_dummy := even
    odd_dummy := odd

    isOdd := true
    for head != nil {
        if isOdd {
            odd.Next = head
            odd = odd.Next
        } else {
            even.Next = head
            even = even.Next
        }
        head = head.Next
        isOdd = !isOdd
    }
    even.Next = nil
    odd.Next = even_dummy.Next
    return odd_dummy.Next
}


Go simplified Two Lists: 6ms, 3.3MB

func oddEvenList(head *ListNode) *ListNode {
    if head == nil {return nil}
    odd := head
    even := head.Next
    evenH := even
    for even != nil && even.Next != nil {
        odd.Next = odd.Next.Next
        odd = odd.Next
        even.Next = even.Next.Next
        even = even.Next
    }
    odd.Next = evenH
    return head
}