746. Min Cost Climbing Stairs

You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index 0, or the step with index 1.

Return the minimum cost to reach the top of the floor.

 

Example 1:

Input: cost = [10,15,20]
Output: 15
Explanation: You will start at index 1.
- Pay 15 and climb two steps to reach the top.
The total cost is 15.
Example 2:

Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6
Explanation: You will start at index 0.
- Pay 1 and climb two steps to reach index 2.
- Pay 1 and climb two steps to reach index 4.
- Pay 1 and climb two steps to reach index 6.
- Pay 1 and climb one step to reach index 7.
- Pay 1 and climb two steps to reach index 9.
- Pay 1 and climb one step to reach the top.
The total cost is 6.
 

Constraints:

2 <= cost.length <= 1000
0 <= cost[i] <= 999

JAVA ITERATIVE + MEMO:  1 ms, 41.9 MB TIME O(N), SPACE O(N)


class Solution {
    public int minCostClimbingStairs(int[] cost) {
        // use memo to track minimum cost to reach current stair cumulatively. 
        // We want to reach the top - which is basically a step with 0 cost.
        int[] minCost = new int[cost.length+1];  // cumulatively track minCost to reach each step. 
        for(int i = 2; i < minCost.length; i++){ // 2<= numStairs
            int oneStep = minCost[i-1]+cost[i-1];
            int twoStep = minCost[i-2]+cost[i-2];
            minCost[i]= Math.min(oneStep,twoStep);
        }
        return minCost[minCost.length-1]; // Return the cost of the top.
    }
}


Java Iterative + three pointer Memo: 0 ms, 42.7 MB , Time O(N), Space O(1) 

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int downOne = 0;
        int downTwo = 0;
        for (int i = 2; i < cost.length + 1; i++) {
            int temp = downOne;
            downOne = Math.min(downOne + cost[i - 1], downTwo + cost[i - 2]);
            downTwo = temp;
        }
        return downOne;
    }
}

JAVA RECURSION + MEMOIZATION (HASHMAP): 3 ms, 42.9 MB

class Solution {
    private HashMap<Integer, Integer> memo = new HashMap<Integer, Integer>();

    public int minCostClimbingStairs(int[] cost) {
        return minimumCost(cost.length, cost);
    }

    private int minimumCost(int i, int[] cost) {
        // Base case, we are allowed to start at either step 0 or step 1
        if (i <= 1) return 0;

        // Check if we have already calculated minimumCost(i)
        if (memo.containsKey(i)) return memo.get(i);

        // If not, cache the result in our hash map and return it
        int downOne = cost[i - 1] + minimumCost(i - 1, cost);
        int downTwo = cost[i - 2] + minimumCost(i - 2, cost);
        memo.put(i, Math.min(downOne, downTwo));
        return memo.get(i);
    }
}


PYTHON two pointer: 38 ms, 13.5 MB


class Solution(object):
    def minCostClimbingStairs(self, cost):
        """
        :type cost: List[int]
        :rtype: int
        """
        oneStep, twoStep = 0,0
        for i in range(2,len(cost)+1):
            temp = oneStep
            oneStep = min(oneStep + cost[i-1], twoStep+ cost[i-2])
            twoStep=temp
        

        return oneStep
