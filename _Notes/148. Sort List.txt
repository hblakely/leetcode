148. Sort List

Given the head of a linked list, return the list after sorting it in ascending order.

 

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is in the range [0, 5 * 104].
-105 <= Node.val <= 105
 

Follow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?




Go Merge-Sort Recursion, Two pointers find middle: 54ms, 7.2MB

func sortList(head *ListNode) *ListNode {
    if head == nil || head.Next == nil {
        return head
    }
    
    mid := findMiddle(head)
    left := head
    right := mid.Next
    mid.Next = nil
    
    sortedLeft := sortList(left)
    sortedRight := sortList(right)
    
    return merge(sortedLeft, sortedRight)
}

func findMiddle(head *ListNode) *ListNode {
    slow := head
    fast := head
    var prev *ListNode
    
    for fast != nil && fast.Next != nil {
        prev = slow
        slow = slow.Next
        fast = fast.Next.Next
    }
    
    return prev
}

func merge(left *ListNode, right *ListNode) *ListNode {
    dummy := &ListNode{}
    current := dummy
    
    for left != nil && right != nil {
        if left.Val < right.Val {
            current.Next = left
            left = left.Next
        } else {
            current.Next = right
            right = right.Next
        }
        current = current.Next
    }
    
    if left != nil {
        current.Next = left
    }
    
    if right != nil {
        current.Next = right
    }
    
    return dummy.Next
}
