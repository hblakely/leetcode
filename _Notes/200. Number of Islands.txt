200. Number of Islands

Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.



JAVA Recursive: 3 ms, 51.3 MB


class Solution {  
    public int numIslands(char[][] grid) {
        if(grid == null || grid.length == 0)        // Fail Early, Fail Often.
            return 0;
        int num_islands = 0;
        // Mark land as visited by setting to 0
        for(int r = 0; r< grid.length; r++){        // row
            for (int c = 0; c<grid[0].length; c++){ // column
                if(grid[r][c]=='1'){                  // LAND HO!!!!!
                    ++num_islands;
                    chart_island(grid, r, c);          
                }
            }
        }
        return num_islands;
    }
    
    private void chart_island(char[][] grid, int r, int c){
        if(r < 0 || c < 0 || r >= grid.length || c >= grid[0].length || grid[r][c] !='1') 
            return;
        
        grid[r][c] = '2'; // Mark the land we found. 
        // chart all connected land.
        chart_island(grid, r - 1, c); // up
        chart_island(grid, r + 1, c); // down
        chart_island(grid, r, c - 1); // left
        chart_island(grid, r, c + 1); // right
    }
}


JAVA Iterative: 8 ms, 50 MB

class Solution {  
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length == 0)
            return 0;
        int count = 0;
        int nr = grid.length, nc = grid[0].length;

        for(int r = 0; r < nr; r++){
            for(int c = 0; c < nc; c++){
                if(grid[r][c] == '1'){
                    count++;
                    grid[r][c] = '2'; // mark as visited
                    Queue<Integer> neighbors = new LinkedList<>();
                    neighbors.add(r * nc + c); // flattening grid position to 1D integer representation
                    while(!neighbors.isEmpty()){
                        int id = neighbors.remove();
                        int row = id/nc;    // integer division removes float value
                        int col = id % nc;  // remainder of id % num columns gives current col
                        if(row-1 >= 0 && grid[row-1][col] == '1'){  // up is unvisited land
                            neighbors.add((row-1) * nc +col);       // add up to stack
                            grid[row-1][col] = '2';                 // mark up as visited 
                        }
                        if(row+1 < nr && grid[row+1][col] == '1'){  // down is unvisited land
                            neighbors.add((row+1) * nc + col);      // add down to stack
                            grid[row+1][col] = '2';                 // mark down as visited
                        }
                        if(col-1>=0 && grid[row][col-1] == '1'){    // left is unvisited land
                            neighbors.add(row * nc + col-1);        // add left to stack
                            grid[row][col-1] = '2';                 // mark left as visited
                        }
                        if(col+1 < nc && grid[row][col+1] == '1'){  // right is unvisited land
                            neighbors.add(row * nc + col+1);        // add right to stack
                            grid[row][col+1] = '2';                 // mark right as visited
                        }
                    }
                }
            }
        }
        return count;
    }
}


PYTHON recursive: 241 ms, 28.7 MB

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if grid is None:
            return 0
        
        nr,nc = len(grid), len(grid[0])
        num_islands = 0
        for r in range(nr):
            for c in range(nc):
                if grid[r][c] == '1':
                    num_islands+=1
                    self.visitIsland(grid, r, c, nr, nc)

        return num_islands


    def visitIsland(self, grid, r, c, nr, nc):
        # End recursion logic
        if r < 0 or r >= nr or c < 0 or c >= nc or grid[r][c] != '1':
            return
        
        grid[r][c] = '2' # mark visited
        self.visitIsland(grid, r-1, c, nr, nc) # up
        self.visitIsland(grid, r+1, c, nr, nc) # down
        self.visitIsland(grid, r, c-1, nr, nc) # left
        self.visitIsland(grid, r, c+1, nr, nc) # right


PYTHON ITERATIVE: 223 ms, 28.7 MB

class Solution(object):
    def numIslands(self, grid):
        """
        :type grid: List[List[str]]
        :rtype: int
        """
        if not grid:
            return 0
    
        nr, nc, count = len(grid), len(grid[0]), 0
        neighbors = list()

        for r in range(nr):
            for c in range(nc):
                if grid[r][c]=='1': # LAND HO!
                    count+=1
                    grid[r][c]='2'  # mark as visited
                    neighbors.append(r*nc+c) #flatten 2 dimensional grid coordinate to 1d
                    while len(neighbors)>0:
                        coord = neighbors.pop(0)            # remove neighbor from stack to visit
                        row, col = coord//nc, coord%nc      # get 2d coordinates from 1d
                        if row-1 >= 0 and grid[row-1][col] == '1': # up unvisited land
                            neighbors.append((row-1)*nc+col)  # add up to stack
                            grid[row-1][col] = '2'          # mark up visited
                        if row+1 < nr and grid[row+1][col] == '1': # down unvisited land
                            neighbors.append((row+1)*nc+col)  # add down to stack
                            grid[row+1][col] = '2'          # mark down visited
                        if col-1 >= 0 and grid[row][col-1] == '1': # left unvisited land
                            neighbors.append(row*nc+col-1)    # add left to stack
                            grid[row][col-1] = '2'          # mark left visited
                        if col+1 < nc and grid[row][col+1] == '1': # right unvisited land
                            neighbors.append(row*nc+col+1)    # add right to stack
                            grid[row][col+1] = '2'          # mark right visited
        return count


