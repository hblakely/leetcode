844. Backspace String Compare

Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

 

Example 1:

Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".
Example 2:

Input: s = "ab##", t = "c#d#"
Output: true
Explanation: Both s and t become "".
Example 3:

Input: s = "a#c", t = "b"
Output: false
Explanation: s becomes "c" while t becomes "b".
 

Constraints:

1 <= s.length, t.length <= 200
s and t only contain lowercase letters and '#' characters.
 

Follow up: Can you solve it in O(n) time and O(1) space?


JAVA, first attempt: 6 ms, 41.2 MB

class Solution {
    public boolean backspaceCompare(String s, String t) {
        // constraints 
        // 1<=s.length,t.length<=200
        // no need to empty check
        // s and t only contain lowercase letters and '#' letters
        // no need for character validation
        // backspacing Nothing is still Nothing.
        String sClean = "";
        String tClean = "";
        int removeS = 0, removeT=0; 
        int longest = s.length()>t.length()?s.length():t.length();

        for(int i = longest-1; i>=0; i--){
            if(i<s.length()){
                if(s.charAt(i)=='#')
                    removeS++;
                else if(removeS>0)
                    removeS--;
                else
                    sClean+=s.charAt(i);
            }
            if(i<t.length()){
                if(t.charAt(i)=='#')
                    removeT++;
                else if(removeT>0)
                    removeT--;
                else
                    tClean+=t.charAt(i);
            }
        }
        return sClean.equals(tClean);
    }   
}

Java, Refined: 0 ms, 40.7 MB
 
class Solution {
    public boolean backspaceCompare(String S, String T) {
        int i = S.length() - 1, j = T.length() - 1;
        int skipS = 0, skipT = 0;

        while (i >= 0 || j >= 0) { // While there may be chars in build(S) or build (T)
            while (i >= 0) { // Find position of next possible char in build(S)
                if (S.charAt(i) == '#') {skipS++; i--;}
                else if (skipS > 0) {skipS--; i--;}
                else break; // Break at kept character
            }
            while (j >= 0) { // Find position of next possible char in build(T)
                if (T.charAt(j) == '#') {skipT++; j--;}
                else if (skipT > 0) {skipT--; j--;}
                else break;
            }
            // If two actual characters are different
            if (i >= 0 && j >= 0 && S.charAt(i) != T.charAt(j))
                return false;
            // If expecting to compare char vs nothing
            if ((i >= 0) != (j >= 0))
                return false;
            i--; j--;
        }
        return true;
    }
}



PYTHON Two pointers: 20 ms, 13.3 MB

class Solution(object):
    def backspaceCompare(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        si, ti= len(s)-1, len(t)-1
        skipS,skipT = 0,0
        # loop through strings backwards
        while si>=0 or ti>=0: 
            # processes s until not deleted char 
            while si>=0:
                if s[si]=='#': # skip logic
                    skipS+=1 
                elif skipS>0:
                    skipS-=1 
                else: break # found char to compare (not skip)
                si-=1
            # process t until not deleted char
            while ti >=0:
                if t[ti]=='#': # skip logic
                    skipT+=1
                elif skipT>0:
                    skipT-=1
                else: break # found char to compare (not skip)
                ti-=1
            # At this point, si and ti point to a valid charicter index, or -1.
            # compare valid chars
            if si>=0 and ti>=0 and s[si]!=t[ti]: # chars don't match.
                return False
            if (si>=0) != (ti>=0): # attempting to compare -1 to valid char.
                return False
            # decrement indexes to work on next chars
            si-=1
            ti-=1
        return True # we made it through the loop, and all chars matched up.



PYTHON cmopress stacks: 20 ms, 13.5 MB

class Solution(object):
    def backspaceCompare(self, s, t):
        return self.compress(s) == self.compress(t)
    
    def compress(self, s):
        stack = []
        for char in s:
            if char != "#":
                stack.append(char)
            elif stack:
                stack.pop()
        return "".join(stack)