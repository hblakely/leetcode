509. Fibonacci Number

The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 

Constraints:

0 <= n <= 30

JAVA ITERATIVE: 0 ms, 39.7 MB

class Solution {
    public int fib(int n) {
        if(n == 0)
            return 0;
        int curr = 1, prev = 0;
        for(int i = 1; i<n; i++){
            curr=curr+prev;
            prev = curr-prev;
        }
        return curr;
    }
}


JAVA RECURSIVE:  8ms, 39.6mb

class Solution {
    public int fib(int n) {
        return n<=1?n:fib(n-1)+fib(n-2);
    }
}

JAVA RECURSIVE + memo: 0ms, 39.7mb

class Solution {
    List<Integer> memo = new ArrayList(List.of(0,1,1));
    public int fib(int n) {
        if(n>=memo.size())
            memo.add(fib(n-1) + fib(n-2));
        return memo.get(n);
    }
}


PYTHON iterative: 7 ms, 13.3 MB

class Solution(object):
    def fib(self, n):
        if n == 0: return 0
        curr,prev = 1,0
        for i in range(1,n):
            curr=curr+prev
            prev=curr-prev

        return curr


PYTHON recursive: 671 ms, 13.2 MB

class Solution(object):
    def fib(self, n):
        if n<=1: return n
        return self.fib(n-1)+self.fib(n-2)


PYTHON recursive + memo Dictionary  26 ms, 13.4 MB


class Solution(object):
    def __init__(self):
        self.fibonacci_dict = {0:0, 1:1}

    def fib(self, n):
        if n >= len(self.fibonacci_dict):
            self.fibonacci_dict[n] = self.fib(n-1)+ self.fib(n-2)  
        return self.fibonacci_dict[n]