278. First Bad Version

You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.

 

Example 1:

Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.
Example 2:

Input: n = 1, bad = 1
Output: 1
 

Constraints:

1 <= bad <= n <= 231 - 1

JAVA Binary Search: 19 ms, 39.5 MB

/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

public class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        // Binary Search
        int lo=0, hi=n;
        while (lo<=hi){
            int mid = lo+(hi-lo)/2;
            if(isBadVersion(mid)){
                // I wonder what happens if we send 0 to isBadVersion?
                if (!isBadVersion(mid-1>=0?mid-1:0))
                    return mid; // first version is bad.
                else // We haven't found a good version yet, reduce search size
                    hi = mid-1;
            }else
                lo = mid+1;
        }
        return n; // default return 
    }
}



PYTHON Binary Search: 11 ms, 13.5 MB

# The isBadVersion API is already defined for you.
# @param version, an integer
# @return a bool
# def isBadVersion(version):

# This is basically a binary search that requires two pointers

class Solution(object):
    def firstBadVersion(self, n):
        # Binary Search
        lo=0
        hi=n
        while lo<=hi:
            n = lo+(hi-lo)//2
            if isBadVersion(n):
                if not isBadVersion(n-1):
                    return n
                else:
                    hi=n-1
            else:
                lo=n+1
        
        return n

    