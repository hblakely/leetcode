
409. Longest Palindrome

Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

Letters are case sensitive, for example, "Aa" is not considered a palindrome here.

Example 1:

Input: s = "abccccdd"
Output: 7
Explanation: One longest palindrome that can be built is "dccaccd", whose length is 7.
Example 2:

Input: s = "a"
Output: 1
Explanation: The longest palindrome that can be built is "a", whose length is 1.
 

Constraints:

1 <= s.length <= 2000
s consists of lowercase and/or uppercase English letters only.



Java using HashMap: 10 ms, 41 MB

class Solution {
    public int longestPalindrome(String s) {
        // pairs of chars, and then maybe a middle char
        Map<Character, Integer> occurrences = new HashMap<>();
        for(int i = 0; i< s.length(); i++){
            if(occurrences.containsKey(s.charAt(i)))
                occurrences.put(s.charAt(i),occurrences.get(s.charAt(i))+1);
            else
                occurrences.put(s.charAt(i),1);
        }
        int odd = 0, length = 0;
        // Loop through map, if %2 != 0, odd-flag = true.
        for(Map.Entry<Character,Integer> c : occurrences.entrySet()){
            int val = c.getValue();
            if(val%2!=0){
                odd = 1;
                length+=(val-1);
            }else {length+=val;}
                
        }
        return length+odd;
    }
}


Java Using int[] 2 ms, 40.6 MB

class Solution {
    public int longestPalindrome(String s) {
        int[] chars = new int['z'];
        for(int i = 0; i<s.length(); i++){
            chars[s.charAt(i)-'A']++;
        }
        int length=0;int odd=0;
        // pairs of chars, and then maybe a middle char
        for(int num : chars){
            if(num%2==0)
                length+=num;
            else{
                odd=1;
                length+=num-1;
            }
        }
        return length+odd;
    }


}



PYTHON Using dict() 16 ms, 13.3 MB

class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: int
        """
        if len(s) is 1:
            return 1
        
        d=dict()
        odd=False
        for c in s:
            if d.has_key(c):
                num = d[c]+1
            else:
                num=1
            d[c]=num
        
        size=0
        for key in d:
            num = d[key]
            if num%2 is 0:
                size+=num
            else:
                size+=num-1
                odd=True

        return size + 1 if odd else size

PYTHON using int[] 29 ms, 13.6 MB

import array
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: int
        """
        chars = array.array('i',(0 for i in range(0,ord('z'))))
        for c in s:
            chars[ord(c)-ord('A')]+=1

        length=odd=0
        for i in range(0,len(chars)):
            if chars[i]%2==0:
                length+=chars[i]
            else:
                odd=1
                length+=chars[i]-1
        return length+odd



JavaScript with Map 66 ms, 43.7 MB
/**
 * @param {string} s
 * @return {number}
 */
var longestPalindrome = function(s) {
    let charMap = new Map();
    for(let i = 0; i<s.length; i++){
        if (charMap.get(s[i]) === undefined)
            charMap.set(s[i],1)
        else
            charMap.set(s[i],charMap.get(s[i])+1);
    }
    let len = 0, odd = 0;
    for (let value of charMap.values()){
        if(value%2==0)
            len+=value;
        else{
            odd=1;
            len+= --value;
        }
    }
    return len+odd;
};


C++ with Vector: 5ms, 6.5mb

class Solution {
public:
    int longestPalindrome(string s) {
        vector<int> occurrences('z' - 'A' + 1, 0); 
        for (char c : s){ 
            occurrences[c - 'A']++; // count occurrences
        }

        int len = 0;
        bool odd = false;
        for(int i = 0; i <= 'z' - 'A'; i++){
            len += occurrences[i] / 2 * 2;
            if(occurrences[i] % 2 == 1){
                odd = true;
            }
        }
        return odd ? len + 1 : len;
    }
};

C++ with int array: 2ms, 6.5mb

class Solution {
public:
    int longestPalindrome(string s) {
        const int alphaSize = 'z' - 'A' + 1;
        int occurrences[alphaSize] = {0}; 
        for (char c : s){ 
            occurrences[c - 'A']++; // count occurrences
        }

        int len = 0;
        bool odd = false;
        for(int i = 0; i <= 'z' - 'A'; i++){
            len += occurrences[i] / 2 * 2;
            if(occurrences[i] % 2 == 1){
                odd = true;
            }
        }
        return odd ? len + 1 : len;
    }
};


Go with Map rune to int: 0ms, 2.1mb 

func longestPalindrome(s string) int {
    dict := map[rune]int{}
    for _, c := range s {
        dict[c]++
    }
    length := 0
    odd := false
    for _, v := range dict {
        length += v / 2 * 2
        if v%2 == 1 {
            odd = true
        }
    }
    if odd {
        length++
    }
    return length
}