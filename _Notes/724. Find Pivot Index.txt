724. Find Pivot Index


Given an array of integers nums, calculate the pivot index of this array.
The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.
If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left. This also applies to the right edge of the array.
Return the leftmost pivot index. If no such index exists, return -1.
 
Example 1:
Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11
Example 2:
Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.
Example 3:
Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.
Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0
 
Constraints:
	•	1 <= nums.length <= 104
	•	-1000 <= nums[i] <= 1000


JAVA: 

class Solution {
    /* 
        I imagine a scale that is trying to balance two weights.
        The pivot index is the balance point between those weights. 
        Everything to the left of the pivot index must weigh the same
        as everything to right right of the pivot index.

        By calculating the running sum we get the "total weight" to be
        balanced at a given point. Subtracting the running total at 
        current index from the total-running sum for the whole array
        gives us the sum (or weight) of the right side of the array.

        The value at index-1 (or 0 when index is 0) of our running sum 
        is the weight of the left side.

        If left and right are equal the current index is our pivot.
    */
    public int pivotIndex(int[] nums) {
        // Calculate Running Sum
        for (int i = 1; i<nums.length; i++)
            nums[i]+=nums[i-1];

        for (int i = 0; i < nums.length; i++){
            // USING VARIABLES TO HOLD LEFT AND RIGHT IS UNECESSARY
            // However, it makes it a little more clear to read as a human.

            // 0 if index is 0 (there is nothing when out of bounds).
            int left = i>0?nums[i-1]:0;
            // Total sum minus current sum. 
            int right = nums[nums.length-1] - nums[i];
            // The weight of left and right are balanced at current location.
            if(left==right)
                return i;
        }

        return -1;
    }
}


PYTHON:
class Solution(object):
    def pivotIndex(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # Calculate Running Sum
        for i in range(1,len(nums)):
            nums[i]+=nums[i-1]
        
        # If Left equals Right return index.
        for i in range(len(nums)):
            if (0 if i == 0 else nums[i-1]) == nums[len(nums)-1]-nums[i]:
                return i
            
        return -1


C++
class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        for (int i = 1; i < nums.size(); i++)
            nums[i]+=nums[i-1];
        
        for (int i = 0; i<nums.size(); i++)
            if((i==0? 0: nums[i-1]) == nums[nums.size()-1]-nums[i])
                return i;
        
        return -1;
    }
};



Javascript:
/**
 * @param {number[]} nums
 * @return {number}
 */
var pivotIndex = function(nums) {
    for (let i = 1; i<nums.length; i++)
        nums[i]+=nums[i-1];

    for (let i = 0; i<nums.length; i++)
        if((i==0? 0 : nums[i-1]) == nums[nums.length-1]-nums[i])
            return i;
    
    return -1;
};




BEST ANSWERS:

Java Solution:
// Runtime: 1 ms, faster than 92.94% of Java online submissions for Find Pivot Index.
// Time Complexity : O(n)
class Solution {
    public int pivotIndex(int[] nums) {
        // Initialize total sum of the given array...
        int totalSum = 0;
        // Initialize 'leftsum' as sum of first i numbers, not including nums[i]...
        int leftsum = 0;
        // Traverse the elements and add them to store the totalSum...
        for (int ele : nums)
            totalSum += ele;
        // Again traverse all the elements through the for loop and store the sum of i numbers from left to right...
        for (int i = 0; i < nums.length; leftsum += nums[i++])
            // sum to the left == leftsum.
            // sum to the right === totalSum - leftsum - nums[i]..
            // check if leftsum == totalSum - leftsum - nums[i]...
            if (leftsum * 2 == totalSum - nums[i])
                return i;       // Return the pivot index...
        return -1;      // If there is no index that satisfies the conditions in the problem statement...
    }
}
C++ Solution:
// Time Complexity : O(n)
class Solution {
public:
    int pivotIndex(vector<int>& nums) {
        // Initialize rightSum to store the sum of all the numbers strictly to the index's right...
        int rightSum = accumulate(nums.begin(), nums.end(), 0);
        // Initialize leftSum to store the sum of all the numbers strictly to the index's left...
        int leftSum = 0;
        // Traverse all elements through the loop...
        for (int idx = 0; idx < nums.size(); idx++) {
            // subtract current elements with from rightSum...
            rightSum -= nums[idx];
            // If the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right...
            if (leftSum == rightSum)
                return idx;     // Return the pivot index...
            // add current elements with leftSum...
            leftSum += nums[idx];
        }
        return -1;      // If there is no index that satisfies the conditions in the problem statement...
    }
};
Python/Python3 Solution:
# Time Complexity : O(n)
# Space Complexity : O(1)
class Solution(object):
    def pivotIndex(self, nums):
        # Initialize leftSum & rightSum to store the sum of all the numbers strictly to the index's left & right respectively...
        leftSum, rightSum = 0, sum(nums)
        # Traverse elements through the loop...
        for idx, ele in enumerate(nums):
            rightSum -= ele
            # If the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right...
            if leftSum == rightSum:
                return idx      # Return the pivot index...
            leftSum += ele
        return -1       # If there is no index that satisfies the conditions in the problem statement...
JavaScript Solution:
// Time Complexity : O(n)
var pivotIndex = function(nums) {
    // Initialize total sum of the given array...
    let totalSum = 0
    // Traverse the elements and add them to store the totalSum...
    for(let i = 0; i < nums.length; i++) {
        totalSum += nums[i]
    }
    // Initialize 'leftsum' as sum of first i numbers, not including nums[i]...
    let leftSum = 0
    // Again traverse all the elements through the for loop and store the sum of i numbers from left to right...
    for (let i = 0; i < nums.length; i++) {
        // sum to the left == leftsum.
        // sum to the right === totalSum - leftsum - nums[i]..
        // check if leftsum == totalSum - leftsum - nums[i]...
        if (leftSum * 2 == totalSum - nums[i])
            return i;       // Return the pivot index...
        leftSum += nums[i]
    }
    return -1      // If there is no index that satisfies the conditions in the problem statement...
};


