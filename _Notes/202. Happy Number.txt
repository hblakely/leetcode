202. Happy Number

Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false
 

Constraints:

1 <= n <= 231 - 1


Java Iterative HashSet solution: 1ms, 39.9MB

class Solution {
    public boolean isHappy(int n) {
        Set<Integer> visited = new HashSet<>();
        while (n!=1 && !visited.contains(n)){
            visited.add(n);
            // get sum of digits squared.
            int sum = 0;
            while(n!=0){
                int num = n%10;
                sum += num*num;
                n=n/10;
            }
            n = sum;
        }
        return n==1;
    }
}

Java Floyd Cycle Detection 2 pointers: 1ms, 39.5MB

class Solution {

     public int getNext(int n) {
        int totalSum = 0;
        while (n > 0) {
            int d = n % 10;
            n = n / 10;
            totalSum += d * d;
        }
        return totalSum;
    }

    public boolean isHappy(int n) {
        int slowRunner = n;
        int fastRunner = getNext(n);
        while (fastRunner != 1 && slowRunner != fastRunner) {
            slowRunner = getNext(slowRunner);
            fastRunner = getNext(getNext(fastRunner));
        }
        return fastRunner == 1;
    }
}


Python 3 iterative Set solution: 40ms, 16.3MB

class Solution:
    def isHappy(self, n: int) -> bool:
        visited = set()
        while n>0 and n!=1 and n not in visited:
            visited.add(n)
            n = self.getDigitSquaredSum(n)
        return n==1

    def getDigitSquaredSum(self, n: int) -> int:
        sum = 0
        while n>0:
           sum += (n%10)*(n%10)
           n = n//10 
        return sum



Go Iterative Map: 0ms, 2.1MB

func isHappy(n int) bool {
    visited := make(map[int]bool)
    for n != 1 && !visited[n] {
        visited[n] = true
        n = getDigitSquaredSum(n)
    }
    return n == 1
}

func getDigitSquaredSum(n int) int {
    sum := 0
    for n > 0 {
        digit := n % 10
        sum += digit * digit
        n /= 10
    }
    return sum
}

