299. Bulls and Cows

You are playing the Bulls and Cows game with your friend.

You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:

The number of "bulls", which are digits in the guess that are in the correct position.
The number of "cows", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.
Given the secret number secret and your friend's guess guess, return the hint for your friend's guess.

The hint should be formatted as "xAyB", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.

 

Example 1:

Input: secret = "1807", guess = "7810"
Output: "1A3B"
Explanation: Bulls are connected with a '|' and cows are underlined:
"1807"
  |
"7810"
Example 2:

Input: secret = "1123", guess = "0111"
Output: "1A1B"
Explanation: Bulls are connected with a '|' and cows are underlined:
"1123"        "1123"
  |      or     |
"0111"        "0111"
Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.
 

Constraints:

1 <= secret.length, guess.length <= 1000
secret.length == guess.length
secret and guess consist of digits only.


JAVA First Attempt, time O(n) (Looped twice), space O(n)

class Solution {
    public String getHint(String secret, String guess) {
        // constraints: 
        // 1<= secret.length, guess.length <=1000
        // no need to empty check. 
        // secret.length == guess.length
        // no need to check size comparison
        // secret and guess consist of digits only
        // no need to validate characters
        Map<Integer,Integer> not_bulls = new HashMap<>();
        int bulls = 0, cows = 0;
        for(int i = 0; i<secret.length(); i++){ // Loop once to get bulls, and mark not-bulls
            int currentSecret = Integer.valueOf(secret.charAt(i));
            int currentGuess = Integer.valueOf(guess.charAt(i));
            if(currentSecret==currentGuess)
                bulls++;
            else{
                if(not_bulls.containsKey(currentSecret))
                    not_bulls.put(currentSecret,not_bulls.get(currentSecret)+1);
                else
                    not_bulls.put(currentSecret,1);
            }
        }
        for(int i = 0; i<secret.length(); i++){
            int currentSecret = Integer.valueOf(secret.charAt(i));
            int currentGuess = Integer.valueOf(guess.charAt(i));
            if(currentSecret!=currentGuess)
                if(not_bulls.containsKey(currentGuess)){
                    if(not_bulls.get(currentGuess)==1)
                        not_bulls.remove(currentGuess);
                    else
                        not_bulls.put(currentGuess, not_bulls.get(currentGuess)-1);
                    cows++;
                }
        }
        return String.format("%1dA%1dB",bulls,cows);
    }
}



Java refined to Time O(n) one pass, space O(1) array of 10 ints

class Solution 
{
    public String getHint(String secret, String guess) {
        int bulls = 0, cows = 0;
        int[] numbers = new int[10];
        for (int i = 0; i<secret.length(); i++) 
        {
            if (secret.charAt(i) == guess.charAt(i))
                bulls++;
            else{
                // A value of zero means even occurrence between secret and guess. 
                if (numbers[secret.charAt(i)-'0']++ < 0) // increments after comparing val
                    cows++;
                if (numbers[guess.charAt(i)-'0']-- > 0) // decrements after comparing val
                    cows++;
            }
        }
        return bulls + "A" + cows + "B";
    }
}



PYTHON : 53 ms, 13.7 MB

class Solution(object):
    def getHint(self, secret, guess):
        """
        :type secret: str
        :type guess: str
        :rtype: str
        """
        bulls,cows = 0,0
        nums=[0,0,0,0,0,0,0,0,0,0]
        for i in range(len(secret)):
            if secret[i]==guess[i]:
                bulls+=1
            else:
                if nums[int(secret[i])] < 0:
                    cows+=1
                nums[int(secret[i])]+=1
                if nums[int(guess[i])] > 0:
                    cows+=1
                nums[int(guess[i])]-=1

        return str(bulls)+"A"+str(cows)+"B"



PYTHON REFINED: 24 ms, 13.4 MB

class Solution(object):
    def getHint(self, secret, guess):
        """
        :type secret: str
        :type guess: str
        :rtype: str
        """
        dic = defaultdict(int)
        a , b= 0, 0
        for c in secret:
            dic[c]+=1
        for i in range(len(guess)):
            if secret[i]==guess[i]:
                a+=1
            if guess[i] in dic and dic[guess[i]]>0:
                b+=1
                dic[guess[i]]-=1
        return str(a)+"A"+str(b-a)+"B"



