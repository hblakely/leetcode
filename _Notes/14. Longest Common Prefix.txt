14. Longest Common Prefix

Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string "".
 
Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
Example 2:

Input: strs = ["dog","racecar","car"]
Output: ""
Explanation: There is no common prefix among the input strings.
 

Constraints:

1 <= strs.length <= 200
0 <= strs[i].length <= 200
strs[i] consists of only lowercase English letters.



Java First Thought: 2ms, 40.1MB 

class Solution {
    public String longestCommonPrefix(String[] strs) {
        // validate input
        if (strs.length ==0)
            return "";
        if (strs.length ==1)
            return strs[0];


        String long_com_pre="";
        String prefix; // use entire first word as prefix to start
        int prefix_length=strs[0].length();

        do{
            prefix = strs[0].substring(0,prefix_length);
            for (int i = 1; i< strs.length; i++){
                if(strs[i].startsWith(prefix))
                    long_com_pre=prefix;
                else{
                    // reset longest prefix, retry with shorter prefix
                    long_com_pre="";
                    prefix_length--;
                    break;
                }
            }
        }while (prefix_length>0 && long_com_pre == "");

        return long_com_pre;      
    }

}



Java Iterative Horizontal scanning: 0ms, 40.5MB

class Solution {
    public String longestCommonPrefix(String[] strs) {
    	if(strs == null || strs.length == 0)
    		return "";
        if(strs.length == 1)
            return strs[0];

        String prefix = strs[0];

        for(int i = 1; i < strs.length; i++){ // iterate through strings
            while(strs[i].indexOf(prefix)!=0){
                prefix = prefix.substring(0, prefix.length() - 1);
                if(prefix.isEmpty()) return "";
            }
        }
        return prefix;
    }
}



Java Iterative Verticle Scanning: 1ms, 40.5MB

class Solution {
    public String longestCommonPrefix(String[] strs) {
    	if(strs == null || strs.length == 0) return "";
        for(int i = 0; i < strs[0].length(); i++){ 
            char c = strs[0].charAt(i);
            for( int j = 1; j < strs.length; j++){
                if(i == strs[j].length() || strs[j].charAt(i) != c) // if index > len || char != 
                    return strs[0].substring(0, i);
            }
        }
        return strs[0];
    }
}


Java Binary Search: 1ms, 40.6MB

class Solution {
    public String longestCommonPrefix(String[] strs) {
        if (strs == null || strs.length == 0)
            return "";
        int minLen = Integer.MAX_VALUE;
        for (String str : strs)
            minLen = Math.min(minLen, str.length());
        int low = 1;
        int high = minLen;
        while (low <= high) {
            int middle = (low + high) / 2;
            if (isCommonPrefix(strs, middle))
                low = middle + 1;
            else
                high = middle - 1;
        }
        return strs[0].substring(0, (low + high) / 2);
    }

    private boolean isCommonPrefix(String[] strs, int len){
        String str1 = strs[0].substring(0,len);
        for (int i = 1; i < strs.length; i++)
            if (!strs[i].startsWith(str1))
                return false;
        return true;
    }
}



Java  Trie

public String longestCommonPrefix(String q, String[] strs) {
    if (strs == null || strs.length == 0)
         return "";  
    if (strs.length == 1)
         return strs[0];
    Trie trie = new Trie();      
    for (int i = 1; i < strs.length ; i++) {
        trie.insert(strs[i]);
    }
    return trie.searchLongestPrefix(q);
}

class TrieNode {

    // R links to node children
    private TrieNode[] links;

    private final int R = 26;

    private boolean isEnd;

    // number of children non null links
    private int size;    
    public void put(char ch, TrieNode node) {
        links[ch -'a'] = node;
        size++;
    }

    public int getLinks() {
        return size;
    }
    //assume methods containsKey, isEnd, get, put are implemented as it is described
   //in  https://leetcode.com/articles/implement-trie-prefix-tree/)
}

public class Trie {

    private TrieNode root;

    public Trie() {
        root = new TrieNode();
    }

//assume methods insert, search, searchPrefix are implemented as it is described
//in  https://leetcode.com/articles/implement-trie-prefix-tree/)
    private String searchLongestPrefix(String word) {
        TrieNode node = root;
        StringBuilder prefix = new StringBuilder();
        for (int i = 0; i < word.length(); i++) {
            char curLetter = word.charAt(i);
            if (node.containsKey(curLetter) && (node.getLinks() == 1) && (!node.isEnd())) {
                prefix.append(curLetter);
                node = node.get(curLetter);
            }
            else
                return prefix.toString();

         }
         return prefix.toString();
    }
}