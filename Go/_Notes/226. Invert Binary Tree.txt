226. Invert Binary Tree

Given the root of a binary tree, invert the tree, and return its root.

 

Example 1:


Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]
Example 2:


Input: root = [2,1,3]
Output: [2,3,1]
Example 3:

Input: root = []
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100




Go Recursion: 0ms, 2.1MB


/**
 * Definition for a binary tree node.
 * type TreeNode struct {
 *     Val int
 *     Left *TreeNode
 *     Right *TreeNode
 * }
 */
func invertTree(root *TreeNode) *TreeNode {
    // Left becomes right, and right becomes left
    if root == nil{
        return root
    }
    temp := root.Left
    root.Left = invertTree(root.Right)
    root.Right = invertTree(temp)
    
    return root
}





Go Iterative Queue - Breadth First: 0ms, 2.1MB

func invertTree(root *TreeNode) *TreeNode {
    if root == nil {
        return nil
    }

    queue := []*TreeNode{root}
    for len(queue) > 0 {
        current := queue[0]
        queue = queue[1:]

        temp := current.Left
        current.Left = current.Right
        current.Right = temp

        if current.Left != nil {
            queue = append(queue, current.Left)
        }
        if current.Right != nil {
            queue = append(queue, current.Right)
        }
    }

    return root
}


