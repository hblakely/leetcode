74. Search a 2D Matrix

You are given an m x n integer matrix matrix with the following two properties:

Each row is sorted in non-decreasing order.
The first integer of each row is greater than the last integer of the previous row.
Given an integer target, return true if target is in matrix or false otherwise.

You must write a solution in O(log(m * n)) time complexity.

 

Example 1:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true
Example 2:


Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 100
-104 <= matrix[i][j], target <= 104

-----------------------------------------------------------------------

Go Binary Search 1D: 0-5ms, 2.7MB


func searchMatrix(matrix [][]int, target int) bool {
	rows := len(matrix)
	cols := len(matrix[0])
	// binary search, subtract 1 for 0 based
	hi := rows * cols - 1
	lo := 0

	var mid, r, c, val int

	for hi >= lo {
		mid = lo + (hi-lo)/2
		c = mid % cols
		r = mid / cols

		val = matrix[r][c]
		if val == target {
			return true
		}
		if val > target {
			hi = mid - 1
		} else {
			lo = mid + 1
		}
	}
	return false
}

