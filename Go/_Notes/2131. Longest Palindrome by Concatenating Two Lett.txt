2131. Longest Palindrome by Concatenating Two Letter Words

You are given an array of strings words. Each element of words consists of two lowercase English letters.

Create the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once.

Return the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0.

A palindrome is a string that reads the same forward and backward.

 
Example 1:

Input: words = ["lc","cl","gg"]
Output: 6
Explanation: One longest palindrome is "lc" + "gg" + "cl" = "lcggcl", of length 6.
Note that "clgglc" is another longest palindrome that can be created.
Example 2:

Input: words = ["ab","ty","yt","lc","cl","ab"]
Output: 8
Explanation: One longest palindrome is "ty" + "lc" + "cl" + "yt" = "tylcclyt", of length 8.
Note that "lcyttycl" is another longest palindrome that can be created.
Example 3:

Input: words = ["cc","ll","xx"]
Output: 2
Explanation: One longest palindrome is "cc", of length 2.
Note that "ll" is another longest palindrome that can be created, and so is "xx".
 

Constraints:

1 <= words.length <= 105
words[i].length == 2
words[i] consists of lowercase English letters.

--------------------------------------------------------------------------

Go, first attempt FAIL Exceeded Time Limit:

import (
	"fmt"
	"sort"
)

func longestPalindrome(words []string) int {

	// increment by 4 when homogeneous string has a match
	// increment by 2 once for odd-middle homogeneous
	// increment by 4 when heterogeneous string has an opposite

	sort.Strings(words)
	wordSlice := make([]string, len(words))
	copy(wordSlice, words)
	oddMiddle := false
	count := 0

	for len(wordSlice) > 0 {
        value := wordSlice[0]
		// Removing the first element
        if len(wordSlice) > 1 {
		    wordSlice = wordSlice[1:]
        }else{
            wordSlice = []string{}
        }

		// Search for duplicate homogeneous value
		if len(value) > 1 && value[0] == value[1] { // homogeneous string
			i := findInSlice(wordSlice, value)
			if i >= 0 { // duplicate found
				// remove duplicate from slice
				wordSlice = append(wordSlice[:i], wordSlice[i+1:]...)
				// increment count by 4
				count += 4
			} else { // toggle odd middle
				if !oddMiddle {
					count += 2
					oddMiddle = true
				}
			}
		} else { // search for opposite
			reversed := reverseString(value)
			i := findInSlice(wordSlice, reversed)
			if i >= 0 { // heterogeneous match found
				// remove match from slice
				wordSlice = append(wordSlice[:i], wordSlice[i+1:]...)
				// increment count by 4
				count += 4
			}
		}
	}

	return count
}

func findInSlice(sorted []string, value string) int {
	index := sort.Search(len(sorted), func(i int) bool {
		return sorted[i] >= value
	})
	if index >= 0 && index < len(sorted) && sorted[index] == value {
		return index
	}
	return -1
}

func reverseString(s string) string {
	runes := []rune(s)
	for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {
		runes[i], runes[j] = runes[j], runes[i]
	}
	return string(runes)
}







Go, HashMap: 228ms, 11.9mb

func longestPalindrome(words []string) int {
	count := make(map[string]int)

	for _, word := range words {
		countOfTheWord := count[word]
		if countOfTheWord == 0 {
			count[word] = 1
		} else {
			count[word] = countOfTheWord + 1
		}
	}

	answer := 0
	central := false

	for word, countOfTheWord := range count {
		// if the word is a palindrome
		if word[0] == word[1] {
			if countOfTheWord%2 == 0 {
				answer += countOfTheWord
			} else {
				answer += countOfTheWord - 1
				central = true
			}
		} else if word[0] < word[1] {
			// consider a pair of non-palindrome words such that one is the reverse of another
			reversedWord := string([]byte{word[1], word[0]})
			if count[reversedWord] > 0 {
				answer += 2 * min(countOfTheWord, count[reversedWord])
			}
		}
	}

	if central { answer++ }

	return 2 * answer
}

func min(a, b int) int {
	if a < b { return a }
	return b
}





Go, [][]int: 182ms, 12.3MB

func longestPalindrome(words []string) int {
    const alphabetSize int = 26
    count := [alphabetSize][alphabetSize]int{}

    for _, word := range words {
        count[word[0]-'a'][word[1]-'a']++
    }

    var answer int
    var central bool

    for i:=0; i<alphabetSize; i++{
    	// Homogeneous character pairs
        if count[i][i] % 2 == 0 {
            answer += count[i][i]
        } else {
            answer += count[i][i]-1
            central = true
        }

        // Heterogeneous character pairs
        for j:=i+1; j<alphabetSize; j++{
            answer += int(math.Min(float64(count[i][j]), float64(count[j][i])))*2
        }
    }
    if central { answer++ }
    
    return 2*answer 
}

