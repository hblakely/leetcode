33. Search in Rotated Sorted Array

There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Example 2:

Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
Example 3:

Input: nums = [1], target = 0
Output: -1
 

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104


-----------------------------------------

Go, Binary Search with Split-Check to update bounds accordingly: 0-5ms, 2.6MB

// FIRST ATTEMPT:

func search(nums []int, target int) int {
	// O(log n) search of a (possibly) split/rotated array of ints
	// Traditional binary search [O(log n)] doesn't work with the rotation.
	// How to update the algorithm to handle the rotation?
	hi := len(nums) - 1
	lo := 0

	// Determine if split exists
	split := false
	first := nums[0]
	last := nums[len(nums)-1]
	if first > last {
		split = true
		if target < first && target > last {
			return -1
		} // not in list
	}

	for hi >= lo {
		mid := (hi + lo) / 2
		val := nums[mid]
		if val == target {
			return mid
		}
		if val > target {
			if split {
				if target < first && val > last {
					lo = mid + 1
				} else {
					hi = mid - 1
				}
			} else {
				hi = mid - 1
			}
		} else { // val < target
			if split {
				if target > last && val < first {
					hi = mid - 1
				} else {
					lo = mid + 1
				}
			} else {
				lo = mid + 1
			}
		}
	}
	return -1
}




---------

Go find Rotational index + Binary Search: 0-5ms, 2.6MB

func search(nums []int, target int) int {
	n := len(nums)

	if n == 1 {
		if nums[0] == target {
			return 0
		}
		return -1
	}

	rotateIndex := findRotateIndex(0, n-1, nums)

	// if target is the smallest element
	if nums[rotateIndex] == target {
		return rotateIndex
	}
	// if array is not rotated, search in the entire array
	if rotateIndex == 0 {
		return binary_search(0, n-1, nums, target)
	}
	if target < nums[0] {
		// search in the right side
		return binary_search(rotateIndex, n-1, nums, target)
	}
	// search in the left side
	return binary_search(0, rotateIndex, nums, target)
}

func findRotateIndex(left, right int, nums []int) int {
	if nums[left] < nums[right] {
		return 0
	}

	for left <= right {
		pivot := (left + right) / 2
		if nums[pivot] > nums[pivot+1] {
			return pivot + 1
		} else {
			if nums[pivot] < nums[left] {
				right = pivot - 1
			} else {
				left = pivot + 1
			}
		}
	}
	return 0
}

func binary_search(left, right int, nums []int, target int) int {
	for left <= right {
		pivot := (left + right) / 2
		if nums[pivot] == target {
			return pivot
		} else {
			if target < nums[pivot] {
				right = pivot - 1
			} else {
				left = pivot + 1
			}
		}
	}
	return -1
}



Go Binary Search One Pass: 0-2ms, 2.6MB

func Search(nums []int, target int) int {
	start := 0
	end := len(nums) - 1
	for start <= end {
		mid := start + (end-start)/2
		if nums[mid] == target {
			return mid
		} else if nums[mid] >= nums[start] {
			if target >= nums[start] && target < nums[mid] {
				end = mid - 1
			} else {
				start = mid + 1
			}
		} else {
			if target <= nums[end] && target > nums[mid] {
				start = mid + 1
			} else {
				end = mid - 1
			}
		}
	}
	return -1