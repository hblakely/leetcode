173. Binary Search Tree Iterator

Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):

BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
int next() Moves the pointer to the right, then returns the number at the pointer.
Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.

You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.

 

Example 1:


Input
["BSTIterator", "next", "next", "hasNext", "next", "hasNext", "next", "hasNext", "next", "hasNext"]
[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]
Output
[null, 3, 7, true, 9, true, 15, true, 20, false]

Explanation
BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);
bSTIterator.next();    // return 3
bSTIterator.next();    // return 7
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 9
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 15
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 20
bSTIterator.hasNext(); // return False
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
0 <= Node.val <= 106
At most 105 calls will be made to hasNext, and next.
 

Follow up:

Could you implement next() and hasNext() to run in average O(1) time and use O(h) memory, where h is the height of the tree?
---------------------------------------------

Go, Iterative, controlled traversal, fast constructor: 21-33ms, 8.5-10.1MB
// Recurr leftwise in constructor, to O(height)
// Next sets root to root.right, and recurrs leftwise O(height)
type BSTIterator struct {
		nodes []TreeNode
}

func Constructor(root *TreeNode) BSTIterator {
	nodes := []TreeNode{}
	inOrderLeft(&nodes,root)
	return BSTIterator{
		nodes: nodes,
	}
}

// Append current to stack, then all lefts
func inOrderLeft(nodes *[]TreeNode, root *TreeNode){
	for root != nil{ 
			*nodes = append(*nodes, *root) 
			root = root.Left
		}
}

// Averate time complexity of Next() is O(1),
// because inOrderLeft is only called when root.Right exists,
// and we would only traverse N nodes if the BST is skewed.
func (this *BSTIterator) Next() int {
	// Pop node from stack
	root := this.nodes[len(this.nodes)-1]
	this.nodes = this.nodes[:len(this.nodes)-1]
	// Set return Val
	num := root.Val 
	// Add next to stack if right exists, otherwise return.
	inOrderLeft(&this.nodes, root.Right)
	return num
}

func (this *BSTIterator) HasNext() bool {
	return len(this.nodes) > 0
}




Go, InOrderRecursive Traversal int[] and index, 32ms, 8.6MB
// Has to traverse whole tree in the constructor. 
// Then next() iterates through [] of values one more time.

type BSTIterator struct {
	nodes []int
	index int
}

func Constructor(root *TreeNode) BSTIterator {
	nodes := []int{}
	inorderTraversal(root, &nodes)

	return BSTIterator{
		nodes: nodes,
		index: -1,
	}
}

func inorderTraversal(node *TreeNode, nodes *[]int) {
	if node == nil {
		return
	}

	inorderTraversal(node.Left, nodes)
	*nodes = append(*nodes, node.Val)
	inorderTraversal(node.Right, nodes)
}

func (this *BSTIterator) Next() int {
	this.index++
	return this.nodes[this.index]
}

func (this *BSTIterator) HasNext() bool {
	return this.index+1 < len(this.nodes)
}



